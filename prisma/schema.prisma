// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  name       String?
  email      String?   @unique
  password   String?
  audioUrl   String
  image      String?
  accounts   Account[]
  sessions   Session[]
  likes      Like[]
  matchesA   Match[]   @relation("user_matchesA")
  matchesB   Match[]   @relation("user_matchesB")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id         String   @unique @default(uuid())
  content    String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  match_id   String
  sender_id  String
  is_seen    Boolean  @default(false)
  match      Match?   @relation(fields: [match_id], references: [id])
}

model Match {
  id       String    @id @unique @default(uuid())
  userA    User      @relation("user_matchesA", fields: [userAId], references: [id], onDelete: Cascade)
  userAId  String
  userB    User      @relation("user_matchesB", fields: [userBId], references: [id], onDelete: Cascade)
  userBId  String
  messages Message[]
}

model Like {
  id         String  @id @unique @default(uuid())
  user_id    String
  to_user_id String
  is_liked   Boolean
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
